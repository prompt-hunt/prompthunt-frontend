/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PromptHuntInterface extends utils.Interface {
  functions: {
    "addPromptExample(uint256,string)": FunctionFragment;
    "createPrompt(string)": FunctionFragment;
    "hasUpvotedPrompt(address,uint256)": FunctionFragment;
    "prompts(uint256)": FunctionFragment;
    "upvotePrompt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPromptExample"
      | "createPrompt"
      | "hasUpvotedPrompt"
      | "prompts"
      | "upvotePrompt",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPromptExample",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "createPrompt",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "hasUpvotedPrompt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "prompts",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "upvotePrompt",
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(
    functionFragment: "addPromptExample",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrompt",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUpvotedPrompt",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "prompts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upvotePrompt",
    data: BytesLike,
  ): Result;

  events: {
    "PromptCreated(uint256,address,string)": EventFragment;
    "PromptExampleAdded(uint256,address,string)": EventFragment;
    "PromptUpvoted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PromptCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromptExampleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromptUpvoted"): EventFragment;
}

export interface PromptCreatedEventObject {
  id: BigNumber;
  owner: string;
  dataUri: string;
}
export type PromptCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  PromptCreatedEventObject
>;

export type PromptCreatedEventFilter = TypedEventFilter<PromptCreatedEvent>;

export interface PromptExampleAddedEventObject {
  id: BigNumber;
  user: string;
  dataUri: string;
}
export type PromptExampleAddedEvent = TypedEvent<
  [BigNumber, string, string],
  PromptExampleAddedEventObject
>;

export type PromptExampleAddedEventFilter =
  TypedEventFilter<PromptExampleAddedEvent>;

export interface PromptUpvotedEventObject {
  id: BigNumber;
  upvoter: string;
}
export type PromptUpvotedEvent = TypedEvent<
  [BigNumber, string],
  PromptUpvotedEventObject
>;

export type PromptUpvotedEventFilter = TypedEventFilter<PromptUpvotedEvent>;

export interface PromptHunt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PromptHuntInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPromptExample(
      _promptId: PromiseOrValue<BigNumberish>,
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPrompt(
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasUpvotedPrompt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    prompts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        dataUri: string;
        upvotes: BigNumber;
      }
    >;

    upvotePrompt(
      _promptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addPromptExample(
    _promptId: PromiseOrValue<BigNumberish>,
    _dataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPrompt(
    _dataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasUpvotedPrompt(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  prompts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      dataUri: string;
      upvotes: BigNumber;
    }
  >;

  upvotePrompt(
    _promptId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addPromptExample(
      _promptId: PromiseOrValue<BigNumberish>,
      _dataUri: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createPrompt(
      _dataUri: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasUpvotedPrompt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    prompts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        dataUri: string;
        upvotes: BigNumber;
      }
    >;

    upvotePrompt(
      _promptId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "PromptCreated(uint256,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      dataUri?: null,
    ): PromptCreatedEventFilter;
    PromptCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      dataUri?: null,
    ): PromptCreatedEventFilter;

    "PromptExampleAdded(uint256,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      user?: null,
      dataUri?: null,
    ): PromptExampleAddedEventFilter;
    PromptExampleAdded(
      id?: PromiseOrValue<BigNumberish> | null,
      user?: null,
      dataUri?: null,
    ): PromptExampleAddedEventFilter;

    "PromptUpvoted(uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      upvoter?: PromiseOrValue<string> | null,
    ): PromptUpvotedEventFilter;
    PromptUpvoted(
      id?: PromiseOrValue<BigNumberish> | null,
      upvoter?: PromiseOrValue<string> | null,
    ): PromptUpvotedEventFilter;
  };

  estimateGas: {
    addPromptExample(
      _promptId: PromiseOrValue<BigNumberish>,
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPrompt(
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasUpvotedPrompt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    prompts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    upvotePrompt(
      _promptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPromptExample(
      _promptId: PromiseOrValue<BigNumberish>,
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPrompt(
      _dataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasUpvotedPrompt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    prompts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    upvotePrompt(
      _promptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
